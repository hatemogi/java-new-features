/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package optional_enhancement;

import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Java 11 LTS 기준 Optional 개선사항
 * https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Optional.html
 */
public class App {

    void orElseThrow() {
        var opt = Optional.of("헬로");
        var s = opt.orElseThrow();
        System.out.printf("opt = %s, s = %s\n", opt, s);
    }

    void isEmpty() {
        var opt = Optional.of(3);
        System.out.printf("Optional.of(3).isPresent() = %b\n", opt.isPresent());
        System.out.printf("Optional.of(3).isEmpty() = %b\n", opt.isEmpty());
        System.out.printf("Optional.empty().isEmpty() = %b\n", Optional.empty().isEmpty());
    }

    void or() {
        Optional<Integer> empty = Optional.empty();
        var opt3 = Optional.of(3);
        var emptyOr3 = empty.or(() -> opt3);
        System.out.printf("Optional.empty().or(() -> Optional.of(3)) = %s\n", emptyOr3);

        var opt2OrOpt3 = Optional.of(2).or(() -> opt3);
        System.out.printf("Optional.of(2).or(() -> Optional.of(3)) = %s\n", opt2OrOpt3);
    }

    void stream() {
        var opt1 = Optional.of("헬로");
        var empty = Optional.<String>empty();
        var opt2 = Optional.of("월드");
        var list = Stream.concat(opt1.stream(), Stream.concat(empty.stream(), opt2.stream()))
                .collect(Collectors.toUnmodifiableList());
        System.out.println("list = " + list);
    }

    void run() {
        or();
        stream();
        orElseThrow();
        isEmpty();
    }

    public static void main(String[] args) {
        new App().run();
    }
}
